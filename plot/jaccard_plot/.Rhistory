dev.off()
pdf("EDU_Loci_2.pdf",width = 15, height = 9)
par(mfrow=c(2,3))
for (chr in c(7:12)){
plot_loci(chr = chr)
}
dev.off()
pdf("EDU_Loci_3.pdf",width = 15, height = 9)
par(mfrow=c(2,3))
for (chr in 13:18){
plot_loci(chr = chr)
}
dev.off()
pdf("EDU_Loci_4.pdf",width = 15, height = 9)
par(mfrow=c(1,3))
for (chr in c(19,20,22)){
plot_loci(chr = chr)
}
dev.off()
library(GenomicRanges)
library(rafalib)
chr=1
plot_loci <- function(chr){
GWAS_temp = loci_GWAS[which(loci_GWAS$chr==chr),]
DeepGWAS_temp = loci_DeepGWAS[which(loci_DeepGWAS$chr==chr),]
validGWAS_temp = loci_valid_GWAS[which(loci_valid_GWAS$chr==chr),]
ir_GWAS <- IRanges(start=GWAS_temp$start, end=GWAS_temp$end)
ir_DeepGWAS <- IRanges(start=DeepGWAS_temp$start, end=DeepGWAS_temp$end)
ir_validGWAS <- IRanges(start=validGWAS_temp$start, end=validGWAS_temp$end)
nullplot( min( start(range(ir_DeepGWAS)), start(range(ir_GWAS)), start(range(ir_validGWAS))),
max( end(range(ir_DeepGWAS)),end(range(ir_GWAS)),end(range(ir_validGWAS)) )+1,
0, 1, xaxt="n", yaxt="n",main=paste("chr",chr,sep = ""))
#abline(v=start(range(ir)):end(range(ir))+1, col="grey")
#axis(1, at=start(range(ir)):end(range(ir))+1 + .5, labels=start(range(ir)):end(range(ir)))
#axis(1, at = DeepGWAS_temp$start + .5,labels=seq_along(ir_DeepGWAS))
axis(1, at = validGWAS_temp$start + .5,labels=seq_along(ir_validGWAS))
axis(2,at = c(0,1,2), labels = c("Validation_GWAS","DeepGWAS","Current_GWAS"))
arrows(start(ir_GWAS),rep(0,dim(GWAS_temp)[1]),end(ir_GWAS)+1,rep(0,dim(GWAS_temp)[1]),#seq_along(ir)
lwd=3,code=3,angle=90,length=.05)
arrows(start(ir_DeepGWAS),rep(1,dim(DeepGWAS_temp)[1]),end(ir_DeepGWAS)+1,rep(1,dim(DeepGWAS_temp)[1]),#seq_along(ir)
lwd=3,code=3,angle=90,length=.05)
arrows(start(ir_validGWAS),rep(2,dim(validGWAS_temp)[1]),end(ir_validGWAS)+1,rep(2,dim(validGWAS_temp)[1]),#seq_along(ir)
lwd=3,code=3,angle=90,length=.05)
}
#tiff("Loci_1-6.tiff",  width = 32, height = 18,res = 300)
pdf("EDU_Loci_1.pdf",width = 15, height = 9)
par(mfrow=c(2,3))
for (chr in 1:6){
plot_loci(chr = chr)
}
dev.off()
pdf("EDU_Loci_2.pdf",width = 15, height = 9)
par(mfrow=c(2,3))
for (chr in c(7:12)){
plot_loci(chr = chr)
}
dev.off()
pdf("EDU_Loci_3.pdf",width = 15, height = 9)
par(mfrow=c(2,3))
for (chr in 13:18){
plot_loci(chr = chr)
}
dev.off()
pdf("EDU_Loci_4.pdf",width = 15, height = 9)
par(mfrow=c(2,2))
for (chr in c(19:22)){
plot_loci(chr = chr)
}
dev.off()
library(GenomicRanges)
library(rafalib)
chr=1
plot_loci <- function(chr){
GWAS_temp = loci_GWAS[which(loci_GWAS$chr==chr),]
DeepGWAS_temp = loci_DeepGWAS[which(loci_DeepGWAS$chr==chr),]
validGWAS_temp = loci_valid_GWAS[which(loci_valid_GWAS$chr==chr),]
ir_GWAS <- IRanges(start=GWAS_temp$start, end=GWAS_temp$end)
ir_DeepGWAS <- IRanges(start=DeepGWAS_temp$start, end=DeepGWAS_temp$end)
ir_validGWAS <- IRanges(start=validGWAS_temp$start, end=validGWAS_temp$end)
nullplot( min( start(range(ir_DeepGWAS)), start(range(ir_GWAS)), start(range(ir_validGWAS))),
max( end(range(ir_DeepGWAS)),end(range(ir_GWAS)),end(range(ir_validGWAS)) )+1,
0, 2, xaxt="n", yaxt="n",main=paste("chr",chr,sep = ""))
#abline(v=start(range(ir)):end(range(ir))+1, col="grey")
#axis(1, at=start(range(ir)):end(range(ir))+1 + .5, labels=start(range(ir)):end(range(ir)))
#axis(1, at = DeepGWAS_temp$start + .5,labels=seq_along(ir_DeepGWAS))
axis(1, at = validGWAS_temp$start + .5,labels=seq_along(ir_validGWAS))
axis(2,at = c(0,1,2), labels = c("Validation_GWAS","DeepGWAS","Current_GWAS"))
arrows(start(ir_GWAS),rep(0,dim(GWAS_temp)[1]),end(ir_GWAS)+1,rep(0,dim(GWAS_temp)[1]),#seq_along(ir)
lwd=3,code=3,angle=90,length=.05)
arrows(start(ir_DeepGWAS),rep(1,dim(DeepGWAS_temp)[1]),end(ir_DeepGWAS)+1,rep(1,dim(DeepGWAS_temp)[1]),#seq_along(ir)
lwd=3,code=3,angle=90,length=.05)
arrows(start(ir_validGWAS),rep(2,dim(validGWAS_temp)[1]),end(ir_validGWAS)+1,rep(2,dim(validGWAS_temp)[1]),#seq_along(ir)
lwd=3,code=3,angle=90,length=.05)
}
#tiff("Loci_1-6.tiff",  width = 32, height = 18,res = 300)
pdf("EDU_Loci_1.pdf",width = 15, height = 9)
par(mfrow=c(2,3))
for (chr in 1:6){
plot_loci(chr = chr)
}
dev.off()
pdf("EDU_Loci_2.pdf",width = 15, height = 9)
par(mfrow=c(2,3))
for (chr in c(7:12)){
plot_loci(chr = chr)
}
dev.off()
pdf("EDU_Loci_3.pdf",width = 15, height = 9)
par(mfrow=c(2,3))
for (chr in 13:18){
plot_loci(chr = chr)
}
dev.off()
pdf("EDU_Loci_4.pdf",width = 15, height = 9)
par(mfrow=c(2,2))
for (chr in c(19:22)){
plot_loci(chr = chr)
}
dev.off()
library(GenomicRanges)
library(rafalib)
chr=1
plot_loci <- function(chr){
GWAS_temp = loci_GWAS[which(loci_GWAS$chr==chr),]
DeepGWAS_temp = loci_DeepGWAS[which(loci_DeepGWAS$chr==chr),]
validGWAS_temp = loci_valid_GWAS[which(loci_valid_GWAS$chr==chr),]
ir_GWAS <- IRanges(start=GWAS_temp$start, end=GWAS_temp$end)
ir_DeepGWAS <- IRanges(start=DeepGWAS_temp$start, end=DeepGWAS_temp$end)
ir_validGWAS <- IRanges(start=validGWAS_temp$start, end=validGWAS_temp$end)
nullplot( min( start(range(ir_DeepGWAS)), start(range(ir_GWAS)), start(range(ir_validGWAS))),
max( end(range(ir_DeepGWAS)),end(range(ir_GWAS)),end(range(ir_validGWAS)) )+1,
0, 2, xaxt="n", yaxt="n",main=paste("chr",chr,sep = ""))
#abline(v=start(range(ir)):end(range(ir))+1, col="grey")
#axis(1, at=start(range(ir)):end(range(ir))+1 + .5, labels=start(range(ir)):end(range(ir)))
#axis(1, at = DeepGWAS_temp$start + .5,labels=seq_along(ir_DeepGWAS))
axis(1, at = validGWAS_temp$start + .5,labels=seq_along(ir_validGWAS))
axis(2,at = c(2,1,0), labels = c("Validation_GWAS","DeepGWAS","Current_GWAS"))
arrows(start(ir_GWAS),rep(0,dim(GWAS_temp)[1]),end(ir_GWAS)+1,rep(0,dim(GWAS_temp)[1]),#seq_along(ir)
lwd=3,code=3,angle=90,length=.05)
arrows(start(ir_DeepGWAS),rep(1,dim(DeepGWAS_temp)[1]),end(ir_DeepGWAS)+1,rep(1,dim(DeepGWAS_temp)[1]),#seq_along(ir)
lwd=3,code=3,angle=90,length=.05)
arrows(start(ir_validGWAS),rep(2,dim(validGWAS_temp)[1]),end(ir_validGWAS)+1,rep(2,dim(validGWAS_temp)[1]),#seq_along(ir)
lwd=3,code=3,angle=90,length=.05)
}
#tiff("Loci_1-6.tiff",  width = 32, height = 18,res = 300)
pdf("EDU_Loci_1.pdf",width = 15, height = 9)
par(mfrow=c(2,3))
for (chr in 1:6){
plot_loci(chr = chr)
}
dev.off()
pdf("EDU_Loci_2.pdf",width = 15, height = 9)
par(mfrow=c(2,3))
for (chr in c(7:12)){
plot_loci(chr = chr)
}
dev.off()
pdf("EDU_Loci_3.pdf",width = 15, height = 9)
par(mfrow=c(2,3))
for (chr in 13:18){
plot_loci(chr = chr)
}
dev.off()
pdf("EDU_Loci_4.pdf",width = 15, height = 9)
par(mfrow=c(2,2))
for (chr in c(19:22)){
plot_loci(chr = chr)
}
dev.off()
mean1 = 1:3
mean2 = 1:3
names(mean1) <- c("A","B","C")
print(mean1)
print(mean2)
identical(mean1,mean2)
all.equal(mean1,mean2)
mean1 = 1:3
mean2 = 1:3
names(mean1) <- c("A","B","C")
print(mean1)
print(mean2)
identical(mean1,mean2)
all.equal(mean1,mean2)
# try as.numeric
identical( as.numeric(mean1),mean2)
all.equal( as.numeric(mean1),mean2)
mean1 = 1:3 + 1e-8
mean2 = 1:3
names(mean1) <- c("A","B","C")
print(mean1)
print(mean2)
identical(mean1,mean2)
all.equal(mean1,mean2)
identical( as.numeric(mean1),mean2)
all.equal( as.numeric(mean1),mean2)
mean1 = 1:3 + 1e-8
mean2 = 1:3
print(mean1)
print(mean2)
identical(mean1,mean2)
all.equal(mean1,mean2)
mean1 = 1:3 + 1e-7
mean2 = 1:3
print(mean1)
print(mean2)
identical(mean1,mean2)
all.equal(mean1,mean2)
mean1 = 1:3 + 1e-8
mean2 = 1:3
print(mean1)
print(mean2)
identical(mean1,mean2)
all.equal(mean1,mean2)
mean1 = 1:3 + 1e-8
mean2 = 1:3
cat(mean1)
print(mean2)
identical(mean1,mean2)
all.equal(mean1,mean2)
1:3 + 1e-8
1:3 + 1e-4
mean1 = 1:3 + 1e-4
mean2 = 1:3
cat(mean1)
print(mean2)
identical(mean1,mean2)
all.equal(mean1,mean2)
mean1 = 1:3 + 1e-4
mean2 = 1:3
cat(mean1)
print(mean2)
identical(mean1,mean2)
all.equal(mean1,mean2)
all.equal(mean1,mean2,tolerance = 0.03)
x = runif(n, min=-2, max=2)
y = x^3 + rnorm(n)
n=100
x = runif(n, min=-2, max=2)
y = x^3 + rnorm(n)
x.trimmed = x[-1 < x & x < 1]
-1 < x & x < 1
y.trimmed = y[-1 < x & x < 1]
x <- c(1:9, 8:1)
y <- c(1, 2*(5:3), 2, -1, 17, 9, 8, 2:9)
op <- par(mfcol = c(3, 1))
for(xpd in c(FALSE, TRUE, NA)) {
plot(1:10, main = paste("xpd =", xpd))
box("figure", col = "pink", lwd = 3)
polygon(x, y, xpd = xpd, col = "orange", lty = 2, lwd = 2, border = "red")
}
par(op)
n <- 100
xx <- c(0:n, n:0)
yy <- c(c(0, cumsum(stats::rnorm(n))), rev(c(0, cumsum(stats::rnorm(n)))))
plot   (xx, yy, type = "n", xlab = "Time", ylab = "Distance")
polygon(xx, yy, col = "gray", border = "red")
title("Distance Between Brownian Motions")
polygon(xx, yy, col = "gray", border = "red")
# Multiple polygons from NA values
# and recycling of col, border, and lty
op <- par(mfrow = c(2, 1))
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,1,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
library(rJava)
.jinit()
javaImport(packages = "java.util")
install.packages("rJava")
library(rJava)
.jinit()
javaImport(packages = "java.util")
library(installr)
install.packages("installr")
library(installr)
install.packages(c("cluster", "mgcv"))
install.packages("later", repos = "https://cran.rstudio.com/")
install.packages("later", repos = "https://cran.rstudio.com/")
install.packages("later")
library(later)
library(shiny); runApp('Dropbox/IJMS-2021/discuss_0422/sample2_3_app38_mouse_newcode_GL.R')
sample(rep(1:3,10))
rep(1:3,10)
sample(rep(1:3,10))
hist(sample(rep(1:3,10)))
table(sample(rep(1:3,10)))
matrix(0,3)
#devtools::install_github('randel/MIND')
library(MIND)
library(MIND)
devtools::install_github('randel/MIND')
install.packages("devtools")
devtools::install_github('randel/MIND')
load("/Users/GangLi/Documents/GitHub/2021-Webportal-IJMS/data/2021-06-27/sample2_3.combined_merged.RData")
readRDS(("/Users/GangLi/Documents/GitHub/2021-Webportal-IJMS/data/2021-06-27/sample2_3.combined_merged.RData")
readRDS("/Users/GangLi/Documents/GitHub/2021-Webportal-IJMS/data/2021-06-27/sample2_3.combined_merged.RData")
x1= rnorm(100, mean = (-1),sd =1)
x1 =matrix(x1,nrow = 50,ncol = 2)
x2 = rnorm(110, mean = (1),sd =1)
x2 =matrix(x2,nrow = 50,ncol = 2)
x2 =matrix(x2,nrow = 55,ncol = 2)
df = rbind(x1,x2)
plot(df[,1],df[,2])
## MMD-MA simulation issue.
# Gang Li
x1 = rnorm(100, mean = (-1),sd =0.3)
x1 =matrix(x1,nrow = 50,ncol = 2)
x2 = rnorm(110, mean = (1),sd =0.3)
x2 =matrix(x2,nrow = 55,ncol = 2)
df = rbind(x1,x2)
plot(df[,1],df[,2])
## MMD-MA simulation issue.
# Gang Li
x1 = rnorm(100, mean = (-1),sd =0.3)
x1 =matrix(x1,nrow = 50,ncol = 2)
x2 = rnorm(110, mean = (1),sd =0.3)
x2 =matrix(x2,nrow = 55,ncol = 2)
df1 = rbind(x1,x2)
plot(df1[,1],df1[,2])
y1 = rnorm(200, mean = (-2),sd =0.3)
y1 =matrix(y1,nrow = 100,ncol = 2)
y2 = rnorm(210, mean = (2),sd =0.3)
y2 =matrix(y2,nrow = 110,ncol = 2)
df2 = rbind(y1,y2)
plot(df2[,1],df2[,2])
plot(df1[,1],df1[,2],col = c(rep(red,50),rep(blue,55)) )
plot(df1[,1],df1[,2],col = c(rep(1,50),rep(2,55)) )
plot(df1[,1],df1[,2],col = c(rep(3,50),rep(2,55)) )
plot(df2[,1],df2[,2],col = c(rep(4,50),rep(5,55)) )
plot(df2[,1],df2[,2],col = c(rep(4,100),rep(5,55*2)) )
plot(df2[,1],df2[,2],col = c(rep(4,100),rep(6,55*2)) )
df3 = rbind(y1+1,y2-1)
plot(df3[,1],df3[,2],col = c(rep(4,100),rep(6,55*2)) )
df4 = rbind(y1+3,y2-3)
plot(df4[,1],df4[,2],col = c(rep(4,100),rep(6,55*2)) )
par(mfrow=c(2,3))
plot(df1[,1],df1[,2],col = c(rep(3,50),rep(2,55)) )
plot(df2[,1],df2[,2],col = c(rep(4,100),rep(6,55*2)) )
#par(mfrow=c(2,1))
plot(df1[,1],df1[,2],col = c(rep(3,50),rep(2,55)) )
plot(df3[,1],df3[,2],col = c(rep(4,100),rep(6,55*2)) )
#par(mfrow=c(2,1))
plot(df1[,1],df1[,2],col = c(rep(3,50),rep(2,55)) )
plot(df4[,1],df4[,2],col = c(rep(4,100),rep(6,55*2)) )
par(mfrow=c(2,1))
plot(df1[,1],df1[,2],col = c(rep(3,50),rep(2,55)) )
plot(df2[,1],df2[,2],col = c(rep(4,100),rep(6,55*2)) )
par(mfrow=c(2,1))
plot(df1[,1],df1[,2],col = c(rep(3,50),rep(2,55)) )
plot(df3[,1],df3[,2],col = c(rep(4,100),rep(6,55*2)) )
par(mfrow=c(2,1))
plot(df1[,1],df1[,2],col = c(rep(3,50),rep(2,55)) )
plot(df4[,1],df4[,2],col = c(rep(4,100),rep(6,55*2)) )
par(mfrow=c(2,3))
plot(df1[,1],df1[,2],col = c(rep(3,50),rep(2,55)) )
#par(mfrow=c(2,1))
plot(df1[,1],df1[,2],col = c(rep(3,50),rep(2,55)) )
#par(mfrow=c(2,1))
plot(df1[,1],df1[,2],col = c(rep(3,50),rep(2,55)) )
plot(df2[,1],df2[,2],col = c(rep(4,100),rep(6,55*2)) )
plot(df3[,1],df3[,2],col = c(rep(4,100),rep(6,55*2)) )
plot(df4[,1],df4[,2],col = c(rep(4,100),rep(6,55*2)) )
temp<-matrxi(rnorm(30),nrow=6,ncol=5)
temp<-matrix(rnorm(30),nrow=6,ncol=5)
dim(temp)
svd(temp)
res = svd(temp)
res$u
res$u %*% t(res$u)
t(res$u) %*% res$u
a =2
exists(a)
exists(a)
exists("a")
a=2
exists("a")
if (!exists("a")) {a=2}
a=2
b=a
##
lncRNA_list<-read.table("Data/GSE/genecode.lncRNA.data_v40",sep="|")
setwd("~/Documents/GitHub/DeepGWAS/plot/jaccard_plot")
setwd("~/Documents/GitHub/DeepGWAS/plot/jaccard_plot")
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
jaccard_table0 <- read.table('pairwise_jaccard_XinHeOnly.txt', header=TRUE,sep=" ")
row.names(jaccard_table0) <- jaccard_table0$name
jaccard_table0 <- jaccard_table0[, -1]
jaccard_matrix0 <- as.matrix(jaccard_table0)
jaccard_table2 <- read.table('pairwise_jaccard_2.txt', header=TRUE,sep=" ")
row.names(jaccard_table2) <- jaccard_table2$name
jaccard_table2 <- jaccard_table2[, -1]
jaccard_matrix2 <- as.matrix(jaccard_table2)
jaccard_table <- read.table('pairwise_jaccard_1.txt', header=TRUE,sep=" ")
row.names(jaccard_table) <- jaccard_table$name
jaccard_table <- jaccard_table[, -1]
jaccard_matrix <- as.matrix(jaccard_table)
encode_list <- c("encode3_cCRE","encode3_chiapet","encode3_dhs_footprints","encode3_dhs_peaks","encode3_rad21","encode3_tfbinding")
#sjaccard_matrix[is.na(jaccard_matrix)]=0
for (i in 1:37){
for (j in 1:37){
# check if in the table 1
if (is.na(jaccard_matrix[i,j])){
jaccard_matrix[i,j] = jaccard_matrix[j,i]
} else {
jaccard_matrix[j,i] = jaccard_matrix[i,j]
}
if (is.na(jaccard_matrix[i,j])){
r = rownames(jaccard_matrix)[i]
c = colnames(jaccard_matrix)[j]
#if (is.na(jaccard_matrix[i,j])){
#if ((r %in% encode_list) || (c %in% encode_list)){
# check if in the table 2
if ((r %in% encode_list) && ( !is.na(jaccard_matrix2[r,c]) ) ){
jaccard_matrix[i,j] = jaccard_matrix2[r,c]#jaccard_matrix2[max(i-7,7-i),c]
jaccard_matrix[j,i] = jaccard_matrix2[r,c]
}
if ((c %in% encode_list) && ( !is.na(jaccard_matrix2[c,r]) ) ){
jaccard_matrix[i,j] = jaccard_matrix2[c,r]#jaccard_matrix2[max(j-7,7-j),r]
jaccard_matrix[j,i] = jaccard_matrix2[c,r]
}
# check if in the table 0
if ((!(r %in% encode_list)) && (!(c %in% encode_list))  ){
if (is.na(jaccard_matrix0[r,c])){
jaccard_matrix[i,j] = jaccard_matrix0[c,r]
jaccard_matrix[j,i] = jaccard_matrix0[c,r]
}else{
jaccard_matrix[i,j] = jaccard_matrix0[r,c]
jaccard_matrix[j,i] = jaccard_matrix0[r,c]
}
}
}
}
}
sum(is.na(jaccard_matrix))
library(gplots)
png("heatmap_anno_1.png", width=1000, height=1000)
heatmap.2(jaccard_matrix,
col=brewer.pal(9,"Blues"),
margins = c(14, 14),
density.info = "none",
lhei = c(2, 8),
trace="none")
dev.off()
row.names(jaccard_table) <- jaccard_table$name
### Plot 2: all anno (37)
jaccard_table <- read.table('pairwise_jaccard.txt', header=TRUE,sep=" ")
row.names(jaccard_table) <- jaccard_table$name
jaccard_table <- jaccard_table[, -1]
jaccard_matrix <- as.matrix(jaccard_table)
#library(ggplot2)
sum(is.na(jaccard_matrix))
for (i in 1:37){
for (j in i:37){
if (is.na(jaccard_matrix[i,j])){
jaccard_matrix[i,j] = jaccard_matrix[j,i]
} else {
jaccard_matrix[j,i] = jaccard_matrix[i,j]
}
}
}
sum(is.na(jaccard_matrix))
jaccard_matrix[10,10]=1
library(gplots)
png("heatmap_anno_1.png", width=1000, height=1000)
heatmap.2(jaccard_matrix,
col=brewer.pal(9,"Blues"),
margins = c(14, 14),
density.info = "none",
lhei = c(2, 8),
trace="none")
dev.off()
library(gplots)
png("heatmap_XinHe_only.png", width=1000, height=1000)
heatmap.2(jaccard_matrix,
col=brewer.pal(9,"Blues"),
margins = c(14, 14),
density.info = "none",
lhei = c(2, 8),
trace="none")
dev.off()
jaccard_table <- read.table('pairwise_jaccard_XinHeOnly.txt', header=TRUE,sep=" ")
row.names(jaccard_table) <- jaccard_table$name
jaccard_table <- jaccard_table[, -1]
jaccard_matrix <- as.matrix(jaccard_table)
#library(ggplot2)
for (i in 1:31){
for (j in i:31){
if (is.na(jaccard_matrix[i,j])){
jaccard_matrix[i,j] = jaccard_matrix[j,i]
} else {
jaccard_matrix[j,i] = jaccard_matrix[i,j]
}
}
}
sum(is.na(jaccard_matrix))
png("heatmap_XinHe_only.png", width=1000, height=1000)
heatmap.2(jaccard_matrix,
col=brewer.pal(9,"Blues"),
margins = c(14, 14),
density.info = "none",
lhei = c(2, 8),
trace="none")
dev.off()
